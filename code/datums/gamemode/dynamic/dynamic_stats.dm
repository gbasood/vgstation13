
/datum/stat/dynamic_mode
	//population curbs, updated every minutes
	var/list/pop_levels = list()

	var/starting_threat_level = 0
	var/list/threat = list()

	var/list/round_start_rulesets = list()
	var/round_start_pop = 0

	var/list/successful_injections = list()//midround/latejoin rulesets should appear here
	var/list/faction_data = list() // data generated by faction's generate_statistics goes here
	var/list/role_data = list() // data generated by an antag role's generate_statistics goes here

/datum/stat/dynamic_mode/proc/update_population(var/datum/gamemode/dynamic/mode)
	var/datum/stat/pop_level/new_pop_level = new
	new_pop_level.time = time2text(world.realtime, "YYYY-MM-DD hh:mm:ss")
	for(var/mob/M in player_list)
		if(M.client)
			new_pop_level.total_server_pop += 1
	new_pop_level.living_players = mode.living_players.len
	new_pop_level.living_antags = mode.living_antags.len
	new_pop_level.dead_players = mode.dead_players.len
	new_pop_level.observers = mode.list_observers.len
	pop_levels.Add(new_pop_level)

/datum/stat/dynamic_mode/proc/successful_injection(var/datum/dynamic_ruleset/ruleset)
	var/datum/stat/successful_injection/new_injection = new
	new_injection.time = time2text(world.realtime, "YYYY-MM-DD hh:mm:ss")
	new_injection.name = ruleset.name
	successful_injections.Add(new_injection)

/datum/stat/dynamic_mode/proc/measure_threat(var/new_threat)
	var/datum/stat/threat_measure/new_threat_mesure = new
	new_threat_mesure.time = time2text(world.realtime, "YYYY-MM-DD hh:mm:ss")
	new_threat_mesure.threat = new_threat
	threat.Add(new_threat_mesure)

/datum/stat/pop_level
	var/time = ""
	var/total_server_pop = 0
	var/living_players = 0
	var/living_antags = 0
	var/dead_players = 0
	var/observers = 0

/datum/stat/successful_injection
	var/time = ""
	var/name = ""

/datum/stat/threat_measure
	var/time = ""
	var/threat = 0


// General role-related stats
/datum/stat/role
	var/name = null
	var/faction_name = null
	var/faction_desc = null
	var/faction_id = null
	var/mind_name = null
	var/mind_key = null
	var/list/objectives = list()
	var/victory = FALSE
	var/scoreboard_text = null

/datum/stat/role/New(var/datum/role/R, var/victorious, var/text)
	name = R.name
	faction_name = R.faction.name
	faction_desc = R.faction.desc
	faction_id = R.faction.ID
	mind_name = R.antag.name
	mind_key = R.antag.key
	victory = victorious
	scoreboard_text = text

	for(var/datum/objective/O in R.objectives.GetObjectives())
		objectives.Add(new /datum/stat/role_objective)

/datum/stat/role_objective
	var/obj_type = null
	var/name = null
	var/desc = null
	var/belongs_to_faction = null
	var/target = null
	var/is_fulfilled = FALSE

/datum/stat/role_objective/New(var/datum/objective/O)
	obj_type = O.type
	name = O.name
	desc = O.explanation_text
	belongs_to_faction = O.faction.ID
	is_fulfilled = O.IsFulfilled()
	if(istype(O, /datum/objective/target))
		var/datum/objective/target/TO = O
		target = TO.target.name

// Faction related stats
/datum/stat/faction
	var/id = null
	var/name = null
	var/desc = null
	var/faction_type = null // typepath
	var/stage = null
	var/minor_victory = FALSE
	var/data = null

/datum/stat/faction/New(var/datum/faction/F)
	id = F.ID
	name = F.name
	desc = F.desc
	faction_type = F.type
	stage = F.stage
	// I could combine these victory values, but I'd rather have future-proofing
	minor_victory = F.minor_victory
	victory = F.check_win()

/datum/stat/faction/vampire(var/datum/faction/vampire/VF)
